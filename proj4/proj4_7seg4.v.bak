/*  
  
  4-digit 7-segment display driver
  Nico Cortes and Rochelle Roberts
  
  
  This module drives the 4-digit 7-segment display on the Basys board.
  
  INPUTS
    
    [3:0]Ai: Which 7-segment displays will be enabled. Active LOW.
    
    [15:0]bcd: a binary-coded, 16-bit number that contains each
    digit of the 7-segment display.
    The bit layout is as follows: - 15:12 7seg 3 - 11:8 7seg 2 - 7:4 7seg 1 - 3:0 7seg 0 -
    
    clk: clock signal; its frequency sets the refresh rate for the 7-segment displays
  OUTPUTS
    [3:0]Ao: The enable bit for each 7-segment display. Active LOW.
  
    [all 3:0]ca, cb, cc, cd, ce, cf, cg, : cathodes for 4 7-segment displays
    
    [3:0] Do: decimal point for each of the 4 7-segment displays. Active LOW.
    
   - Anode layout for each 7-segment display
    - A -
   |     |
   F     B
   |     |
    - G -
   |     | 
   E     C
   |     |
    - D -   - P
  
*/

module proj4_7seg4(Ai, bcd0, bcd1, bcd2, bcd3, clk, Ao, ca, cb, cc, cd, ce, cf, cg, Do);
  input Ai, bcd0, bcd1, bcd2, bcd3, clk;
  wire[3:0] Ai, bcd0, bcd1, bcd2, bcd3;

  output Ao, ca, cb, cc, cd, ce, cf, cg, Do;
  reg[3:0] Ao, ca, cb, cc, cd, ce, cf, cg, Do; 
  
    wire[6:0] s0, s1, s2, s3;

  //decimal points should all be disabled
  sevenSeg ss0(Ai[0], bcd0, 1'b1, Ao[0], s0, Do[0]);
  sevenSeg ss1(Ai[1], bcd1, 1'b1, Ao[1], s1, Do[1]);
  sevenSeg ss2(Ai[2], bcd2, 1'b1, Ao[2], s2, Do[2]);
  sevenSeg ss3(Ai[3], bcd3, 1'b1, Ao[3], s3, Do[3]);

  always@(posedge clk) begin
    {ca[0], cb[0], cc[0], cd[0], ce[0], cf[0], cg[0]} <= s0;
    {ca[1], cb[1], cc[1], cd[1], ce[1], cf[1], cg[1]} <= s1;
    {ca[2], cb[2], cc[2], cd[2], ce[2], cf[2], cg[2]} <= s2;
    {ca[3], cb[3], cc[3], cd[3], ce[3], cf[3], cg[3]} <= s3;
  end
endmodule
