/*
Nico and Rochelle
Lab5 Part A: The Keyboard

PS2 Protocol 

PS2Clk : clock for ps2 protocol, generated by the keyboard only when key being pushed, gather bits on negedge
clk: regular system clk
key_code: output, key that was hit
PS2Data: the 11 bit words
strobe: output to led, led on only when release key


*/

module ps2(clk100Mhz, PS2Clk, PS2Data, key_code1, key_code0, key_code_en, strobe, ledT);
input clk100Mhz, PS2Clk, PS2Data;
output reg[3:0] key_code1, key_code0;
output reg key_code_en, strobe; 
reg[21:0] shift_reg;
reg[4:0] count; // used to count the shift registers
reg ledFlag;
reg[9:0] scount;
output reg ledT;
initial begin
strobe <= 0;
ledFlag <= 0;
count <= 0;
shift_reg <= 0;
scount <= 0;
ledT <= 0;
end

wire clk10Khz;
    complexDivider kbDiv(clk100Mhz, 5000, clk10Khz);

// note: PS2Clk only running when a button hit. off otherwise. 
always @(negedge PS2Clk) begin 
    ledT <=1;
    shift_reg <= { PS2Data, shift_reg[20-:21] }; //want to shift into right most bit, so in order
    count <= count + 1;
  
  if(count == 11) begin
      if(shift_reg[19-:8] == 8'hf0)begin // check if F0 
        ledFlag <=1; // indicates that the button released --need to turn LED on
      end else begin 
        count <= 0; // not released, reset counter and wait for next packet.
        ledFlag<=0;
      end 
  end 
  
  if(count == 22) begin
     key_code_en <= 1;
     key_code0 <= shift_reg[15-:4]; // save key code
     key_code1 <= shift_reg[19-:4]; // save key code
     count <= 0; 
  end
end

reg syncFlag;
    //clock be .1 ms
    always @(posedge clk10Khz) begin
         if(ledFlag && syncFlag)begin
            scount <= 1000;
         end 
     
         if(scount > 0) begin
            syncFlag <= 0;
            strobe <=  1;
            scount <= scount - 1;
         end else begin 
            syncFlag <= 1;
            strobe <= 0;
         end
         
        
    end

endmodule 