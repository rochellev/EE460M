/*
Nico and Rochelle
Lab5 Part A: The Keyboard

PS2 Protocol 

PS2Clk : clock for ps2 protocol, generated by the keyboard only when key being pushed, gather bits on negedge
clk: regular system clk
key_code: output, key that was hit
PS2Data: the 11 bit words
strobe: output to led, led on only when release key
internals ---

*/

module ps2(clk, PS2Clk, PS2Data, key_code, strobe);
input clk, PS2Clk, PS2Data;
output reg [7:0] key_code; 
output reg strobe; 
reg [21:0] shift_reg;
reg [4:0] count; // used to count the shift registers
reg ledFlag;
reg [9:0]scount;
initial begin
strobe <= 0;
ledFlag <= 0;
count <= 0;
shift_reg <= 0;
scount <= 0;
end

// note: PS2Clk only running when a button hit. off otherwise. 
always @(negedge PS2Clk) begin 
shift_reg <= {shift_reg[20-:20], PS2Data}; //shift to left
count <= count + 1;

if(count == 11) begin
  if(shift_reg[10-:8] == 8'hf0)begin // check if F0 
	ledFlag <=1; // indicates that the button released --need to turn LED on
 	end else begin 
	count <= 0; // not released, reset counter and wait for next packet.
	ledFlag<=0;
end 
end 
end

reg syncFlag;
//clock be .1 ms
always @(posedge clk) begin
if(clk)begin
 if(ledFlag && syncFlag)begin
    scount <= 1000;
 end 
 
 if(scount > 0) begin
    syncFlag <= 0;
    strobe <=  1;
    scount <= scount - 1;
 else begin 
    syncFlag <= 1;
    strobe <= 0;
 end
    
    end 
 if(count == 22)begin
	key_code <= shift_reg[10-:8]; // save key code 
end // need else?	 
end
end

endmodule 